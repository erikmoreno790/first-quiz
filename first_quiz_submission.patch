diff --git a/part1/question1.py b/part1/question1.py
index 5c99fdb..7e9d3c0 100644
--- a/part1/question1.py
+++ b/part1/question1.py
@@ -20,16 +20,20 @@ def get_city_temperature(city):
       return 17
    if city == "San Francisco":
       return 16
+   elif city == "New York":
+      return 14
 
 def get_city_weather(city):
 
-  sky_condition = None
+   sky_condition = None
 
-  if city == "Sao Paulo":
+   if city == "Sao Paulo":
      sky_condition = "cloudy"
-  elif city == "New York":
+   elif city == "New York":
      sky_condition = "rainy"
+   elif city == "Quito":
+      sky_condition = "sunny"
 
-  temperature = get_city_temperature(city)
+   temperature = get_city_temperature(city)
 
-  return str(temperature) + " degrees and " + sky_condition
\ No newline at end of file
+   return str(temperature) + " degrees and " + sky_condition
\ No newline at end of file
diff --git a/part1/question2.py b/part1/question2.py
index 34a9b01..09a7530 100644
--- a/part1/question2.py
+++ b/part1/question2.py
@@ -17,5 +17,8 @@
 
 swapper = None
 
+def swapper(tupla):
+  return (tupla[1],tupla[0])
+
 def run_swapper(list_of_tuples):
   return list(map(swapper, list_of_tuples))
\ No newline at end of file
diff --git a/part1/question3.py b/part1/question3.py
index 04fab99..d2af1f7 100644
--- a/part1/question3.py
+++ b/part1/question3.py
@@ -27,7 +27,8 @@
 
 # This function should return an oven instance!
 def make_oven():
-  None
+  oven = HornoMagico()
+  return oven
 
 def alchemy_combine(oven, ingredients, temperature):
   
@@ -41,4 +42,30 @@ def alchemy_combine(oven, ingredients, temperature):
   else:
     oven.wait()
 
-  return oven.get_output()
\ No newline at end of file
+  return oven.get_output()
+
+class HornoMagico:
+
+  def __init__(self):
+    self.ingredients = []
+
+  def add(self, item):
+    self.ingredients.append(item)
+
+  def freeze(self):
+    pass
+
+  def boil(self):
+    pass
+
+  def wait(self):
+    pass
+
+  def get_output(self):
+    if "mercury" in self.ingredients:
+      return "gold"
+    elif "water" in self.ingredients:
+      return "snow"
+    elif "cheese" in self.ingredients:
+      return "pizza"
+
diff --git a/part1/question3_test.py b/part1/question3_test.py
index 6cb6c89..c1018de 100644
--- a/part1/question3_test.py
+++ b/part1/question3_test.py
@@ -1,3 +1,5 @@
+from question3 import alchemy_combine, make_oven
+
 def test_alchemy_combine():
 
   assert alchemy_combine(
diff --git a/part1/question4.py b/part1/question4.py
index 1e1b2bf..cc3b5c9 100644
--- a/part1/question4.py
+++ b/part1/question4.py
@@ -24,7 +24,9 @@ import pets_db
 
 sql_pets_owned_by_nobody = """
 
-Your SQL here.
+SELECT A.name, A.species, A.age FROM animals A
+LEFT JOIN people_animals P ON A.animal_id = P.pet_id
+WHERE P.owner_id IS NULL;
 
 """
 
@@ -34,7 +36,10 @@ Your SQL here.
 
 sql_pets_older_than_owner = """
 
-Your SQL here.
+SELECT COUNT(*) FROM animals A
+INNER JOIN people_animals PA ON PA.pet_id = A.animal_id
+INNER JOIN people P ON P.person_id = PA.owner_id
+WHERE A.age > P.age
 
 """
 
@@ -43,6 +48,15 @@ Your SQL here.
 # The output should be a list of tuples in the format: (<person name>, <pet name>, <species>)
 sql_only_owned_by_bessie = """ 
 
-Your SQL here.
+SELECT P.name AS person_name, A.name AS pet_name, A.species
+FROM animals A
+INNER JOIN people_animals PA ON PA.pet_id = A.animal_id
+INNER JOIN people P ON P.person_id = PA.owner_id
+WHERE P.name = "bessie" AND (
+    SELECT COUNT(DISTINCT owner_id) FROM people_animals WHERE pet_id = A.animal_id
+) = 1;
+
+
+
 
 """
\ No newline at end of file
diff --git a/part1/question5.py b/part1/question5.py
index f76654f..ee60605 100644
--- a/part1/question5.py
+++ b/part1/question5.py
@@ -20,7 +20,11 @@
 
 sql_create_favorite_foods = """
 
-Your SQL here.
+CREATE TABLE favorite_foods (
+    food_id integer,
+    name text,
+    vegetarian integer
+);
 
 """
 
@@ -30,7 +34,11 @@ Your SQL here.
 
 sql_alter_tables_with_favorite_food = """
 
-Your SQL here.
+ALTER TABLE animals
+ADD favorite_food_id integer;
+
+ALTER TABLE people
+ADD favorite_food_id integer;
 
 """
 
@@ -40,6 +48,8 @@ Your SQL here.
 
 sql_select_all_vegetarian_pets = """
 
-Your SQL here.
+SELECT A.name, F.name FROM animals A
+INNER JOIN favorite_foods F ON F.food_id = A.favorite_food_id
+WHERE F.vegetarian = 1;
 
 """
\ No newline at end of file
diff --git a/part1/quiz_pets b/part1/quiz_pets
new file mode 100644
index 0000000..fa00d07
Binary files /dev/null and b/part1/quiz_pets differ
diff --git a/part2/src/main/java/org/velezreyes/quiz/question6/VendingMachineImpl.java b/part2/src/main/java/org/velezreyes/quiz/question6/VendingMachineImpl.java
index 85742c4..fb5c0a2 100644
--- a/part2/src/main/java/org/velezreyes/quiz/question6/VendingMachineImpl.java
+++ b/part2/src/main/java/org/velezreyes/quiz/question6/VendingMachineImpl.java
@@ -1,9 +1,69 @@
 package org.velezreyes.quiz.question6;
 
-public class VendingMachineImpl {
+public class VendingMachineImpl implements VendingMachine {
 
-  public static VendingMachine getInstance() {
-    // Fix me!
-    return null;
+  private boolean quarterInserted = false;
+  private int moneyInserted = 0;
+  private static VendingMachineImpl instance;
+
+  private VendingMachineImpl(){
+    //Constructor de la clase estatica 
+  }
+ 
+  public static VendingMachineImpl getInstance() {
+    if (instance == null) {
+      instance = new VendingMachineImpl();
+    }
+    return instance;
+  }
+
+  @Override
+  public void insertQuarter() {
+   
+    quarterInserted = true;
+    moneyInserted +=25;
+  }
+
+  @Override
+  public Drink pressButton(String name) throws org.velezreyes.quiz.question6.NotEnoughMoneyException, org.velezreyes.quiz.question6.UnknownDrinkException {
+    if (!quarterInserted){
+      throw new NotEnoughMoneyException();
+    }
+
+    if("KarenTea".equals(name)){
+      if(moneyInserted <= 75){
+        throw new NotEnoughMoneyException();
+      }
+      quarterInserted = false;
+      moneyInserted -= 75;
+      return new Drink() {
+
+        @Override
+        public String getName() {
+          return "KarenTea";
+        }
+
+        @Override
+        public boolean isFizzy() {
+          return false;
+        } 
+      };
+    } else if("ScottCola".equals(name)){
+      quarterInserted = false;
+      return new Drink() {
+
+        @Override
+        public String getName() {
+          return "ScottCola";
+        }
+
+        @Override
+        public boolean isFizzy() {
+          return true;
+        }
+      };
+    } else {
+      throw new UnknownDrinkException();
+    }
   }
 }
diff --git a/part2/src/test/java/org/velezreyes/quiz/Question6Test.java b/part2/src/test/java/org/velezreyes/quiz/Question6Test.java
index eaf7fdd..6c09943 100644
--- a/part2/src/test/java/org/velezreyes/quiz/Question6Test.java
+++ b/part2/src/test/java/org/velezreyes/quiz/Question6Test.java
@@ -6,6 +6,7 @@ import static org.junit.jupiter.api.Assertions.assertNotNull;
 import static org.junit.jupiter.api.Assertions.assertThrows;
 import static org.junit.jupiter.api.Assertions.assertTrue;
 
+import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 import org.velezreyes.quiz.question6.Drink;
 import org.velezreyes.quiz.question6.NotEnoughMoneyException;
@@ -15,16 +16,29 @@ import org.velezreyes.quiz.question6.VendingMachineImpl;
 
 public class Question6Test {
 
+  private VendingMachine vm;
+
+  @BeforeEach
+  public void setUp(){
+    //Creamos una nueva instancia de la maquina expendedora antes de cada prueba
+    vm = VendingMachineImpl.getInstance();
+
+
+     // Reinicia la variable moneyInserted a cero
+    /*  try {
+      vm.pressButton("ScottCola");
+  } catch (Exception e) {
+
+  }*/
+  }
+
   @Test
   public void canCreateVendingMachineInstance() {
-    VendingMachine vm = VendingMachineImpl.getInstance();
     assertNotNull(vm);
   }
 
   @Test
   public void drinkNotFree() {
-    VendingMachine vm = VendingMachineImpl.getInstance();
-
     Exception exception = assertThrows(NotEnoughMoneyException.class, () -> {
       vm.pressButton("ScottCola");
     });
@@ -32,8 +46,6 @@ public class Question6Test {
 
   @Test
   public void canGetScottColaFor75Cents() throws Exception {
-    VendingMachine vm = VendingMachineImpl.getInstance();
-
     vm.insertQuarter();
     vm.insertQuarter();
     vm.insertQuarter();
@@ -44,9 +56,8 @@ public class Question6Test {
     assertEquals(drink.getName(), "ScottCola");
   }
 
+  @Test
   public void machineResets() throws Exception {
-    VendingMachine vm = VendingMachineImpl.getInstance();
-
     vm.insertQuarter();
     vm.insertQuarter();
     vm.insertQuarter();
@@ -61,7 +72,6 @@ public class Question6Test {
 
   @Test
   public void canGetKarenTeaForOneDollar() throws Exception {
-    VendingMachine vm = VendingMachineImpl.getInstance();
 
     vm.insertQuarter();
     vm.insertQuarter();
@@ -75,13 +85,13 @@ public class Question6Test {
     vm.insertQuarter();
 
     Drink drink = vm.pressButton("KarenTea");
+    assertNotNull(drink);
     assertFalse(drink.isFizzy());
     assertEquals(drink.getName(), "KarenTea");
   }
 
   @Test
   public void otherDrinksUnknown() throws Exception {
-    VendingMachine vm = VendingMachineImpl.getInstance();
 
     vm.insertQuarter();
     vm.insertQuarter();
